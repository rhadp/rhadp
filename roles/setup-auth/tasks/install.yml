# Implement your install deployment tasks here
# -------------------------------------------------

# prepare the default admin user

- name: create the default groups
  ignore_errors: true # can fail if group already exists
  shell: |
    oc adm groups new {{ item }} \
      --kubeconfig="$HOME/.kube/{{ cluster_name }}"
  with_items:
    - "{{ cluster_admin_group }}"
    - "{{ platform_admin_group }}"
    - "{{ default_developer_group }}"

- name: add the cluster-admin ClusterRole to the admin group
  shell: |
    oc adm policy add-cluster-role-to-group cluster-admin {{ cluster_admin_group }} \
      --kubeconfig="$HOME/.kube/{{ cluster_name }}"

- name: set up cluster admin user
  k8s:
    merge_type:
      - strategic-merge
      - merge
    definition: "{{ lookup('template', 'clusteradmin_role_binding.j2') | from_yaml }}"
    state: present
    kubeconfig: "{{ local_kubeconfig_file }}"
  when: default_admin_user is defined

- name: add the default admin user to the admin groups
  shell: |
    oc adm groups add-users {{ cluster_admin_group }} {{ default_admin_user }} \
      --kubeconfig="$HOME/.kube/{{ cluster_name }}"

    oc adm groups add-users {{ platform_admin_group }} {{ default_admin_user }} \
      --kubeconfig="$HOME/.kube/{{ cluster_name }}"
  when: default_admin_user is defined

# RBAC for the rest of the default groups

- name: add default roles to the default developer group
  shell: |
    oc adm policy add-cluster-role-to-group {{ item }} {{ platform_admin_group }} \
      --kubeconfig="$HOME/.kube/{{ cluster_name }}"

    oc adm policy add-cluster-role-to-group {{ item }} {{ default_developer_group }} \
      --kubeconfig="$HOME/.kube/{{ cluster_name }}"
  with_items: # see https://docs.redhat.com/en/documentation/openshift_container_platform/4.18/html/authentication_and_authorization/using-rbac
    - "basic-user"
    - "cluster-status"
    - "cluster-reader"
    - "edit"
    - "self-provisioner"

# prepare for the htpasswd oauth provider

- name: generate htpasswd file
  template:
    src: "htpasswd.j2"
    dest: "roles/setup-auth/files/users.htpasswd"
    owner: "{{ ansible_user_id }}"
    mode: 0664

- name: create htpasswd secret from htpasswd file
  ignore_errors: true # can fail if secret already exists
  shell: |
    oc create secret generic htpasswd-secret \
      --from-file=htpasswd=roles/setup-auth/files/users.htpasswd \
      -n openshift-config \
      --kubeconfig="$HOME/.kube/{{ cluster_name }}"

# prepare the keycloak instance

- name: create keycloak instance and RHADP realm
  k8s:
    definition: "{{ lookup('template', item ) | from_yaml }}"
    state: present
    apply: yes
    kubeconfig: "{{ local_kubeconfig_file }}"
  loop:
    - keycloak-temp-admin-secret.yml.j2
    - keycloak-db-secret.yml.j2
    - keycloak-db-statefulset.yml.j2
    - keycloak-db-service.yml.j2
    - keycloak-instance.yml.j2
    - openid-client-secret.yml.j2
    - keycloak-openshift-realm.yml.j2
    
- name: pause to allow KC startup and realm import to finish
  pause:
    seconds: 300

# configure OAuth

- name: update oauth configuration
  k8s:
    merge_type:
      - strategic-merge
      - merge
    definition: "{{ lookup('template', 'openshift-oauth-config.yml.j2') | from_yaml }}"
    state: present
    kubeconfig: "{{ local_kubeconfig_file }}"

# remove the kubeadmin user secret and self-provisioner cluster role binding

- name: remove kubeadmin user secret
  k8s:
    api_version: v1
    kind: Secret
    namespace: kube-system
    name: kubeadmin
    state: absent
    kubeconfig: "{{ local_kubeconfig_file }}"
  when: remove_kubeadmin | bool

- name: remove self-provisioner
  shell: |
    oc adm policy remove-cluster-role-from-group \
      self-provisioner system:authenticated:oauth \
      --kubeconfig="$HOME/.kube/{{ cluster_name }}"
  when: remove_selfprovisioning | bool